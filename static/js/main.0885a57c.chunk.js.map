{"version":3,"sources":["Menu/MenuDrawer.js","Header/Header.js","App.js","serviceWorker.js","index.js"],"names":["MenuDrawer","state","drawerOpen","toggleDrawer","open","_this","setState","classes","this","props","sideList","react_default","a","createElement","className","list","toolbarIcon","IconButton_default","CancelOutlined_default","Divider_default","List_default","map","text","index","ListItem_default","button","key","ListItemIcon_default","MoveToInbox_default","Mail_default","ListItemText_default","primary","Button_default","onClick","menuButton","color","aria-label","Menu_default","Drawer_default","anchor","onClose","tabIndex","role","onKeyDown","React","Component","withStyles","theme","width","grow","flexGrow","align","Object","objectSpread","display","alignItems","justifyContent","mixins","toolbar","SimpleAppBar","root","AppBar_default","position","Toolbar_default","Typography_default","variant","sectionDesktop","sectionMobile","Menu_MenuDrawer","defineProperty","breakpoints","up","App","Header","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0885a57c.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Button from '@material-ui/core/Button';\r\nimport List from '@material-ui/core/List';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\r\nimport MailIcon from '@material-ui/icons/Mail';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport CancelIconOutlined from '@material-ui/icons/CancelOutlined';\r\n\r\n\r\nconst styles = theme => ({\r\n    list: {\r\n        width: 250,\r\n    },\r\n    grow: {\r\n        flexGrow: 1,\r\n        align: \"right\"\r\n    },\r\n    toolbarIcon: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'flex-end',\r\n        ...theme.mixins.toolbar,\r\n    },\r\n});\r\n\r\nclass MenuDrawer extends React.Component {\r\n    state = {\r\n        drawerOpen: false,\r\n    };\r\n\r\n    toggleDrawer = (open) => () => {\r\n        this.setState({drawerOpen: open});\r\n    };\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n\r\n        const sideList = (\r\n            <div className={classes.list}>\r\n                <div className={classes.toolbarIcon}>\r\n                    <IconButton>\r\n                        <CancelIconOutlined />\r\n                    </IconButton>\r\n                </div>\r\n                <Divider />\r\n                <List>\r\n                    {['Inbox', 'Starred', 'Send email', 'Drafts'].map((text, index) => (\r\n                        <ListItem button key={text}>\r\n                            <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\r\n                            <ListItemText primary={text} />\r\n                        </ListItem>\r\n                    ))}\r\n                </List>\r\n                <Divider />\r\n                <List>\r\n                    {['All mail', 'Trash', 'Spam'].map((text, index) => (\r\n                        <ListItem button key={text}>\r\n                            <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\r\n                            <ListItemText primary={text} />\r\n                        </ListItem>\r\n                    ))}\r\n                </List>\r\n            </div>\r\n        );\r\n\r\n        return (\r\n            <div>\r\n                <Button onClick={this.toggleDrawer(true)}>\r\n                    <IconButton className={classes.menuButton} color=\"inherit\" aria-label=\"Menu\">\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n                </Button>\r\n                <Drawer anchor=\"right\" open={this.state.drawerOpen} onClose={this.toggleDrawer(false)}>\r\n                    <div\r\n                        tabIndex={0}\r\n                        role=\"button\"\r\n                        onClick={this.toggleDrawer(false)}\r\n                        onKeyDown={this.toggleDrawer(false)}\r\n                    >\r\n                        {sideList}\r\n                    </div>\r\n                </Drawer>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nMenuDrawer.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(MenuDrawer);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport MenuDrawer from \"../Menu/MenuDrawer\";\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    grow: {\r\n        flexGrow: 1,\r\n    },\r\n    sectionDesktop: {\r\n        display: 'none',\r\n        [theme.breakpoints.up('md')]: {\r\n            display: 'flex',\r\n        },\r\n    },\r\n    sectionMobile: {\r\n        display: 'flex',\r\n        [theme.breakpoints.up('md')]: {\r\n            display: 'none',\r\n        },\r\n    },\r\n});\r\n\r\nclass SimpleAppBar extends React.Component {\r\n    render() {\r\n        const { classes } = this.props;\r\n\r\n        return (\r\n            <div className={classes.root}>\r\n                <AppBar position=\"static\" color=\"default\">\r\n                    <Toolbar>\r\n                        <Typography variant=\"h6\" color=\"inherit\">\r\n                            Emily Hernandez\r\n                        </Typography>\r\n                        <div className={classes.grow} />\r\n                        <div className={classes.sectionDesktop}>\r\n                            <Button color=\"inherit\">Work</Button>\r\n                            <Button color=\"inherit\">About me</Button>\r\n                            <Button color=\"inherit\">Contact</Button>\r\n                        </div>\r\n                        <div className={classes.sectionMobile}>\r\n                            <MenuDrawer/>\r\n                        </div>\r\n                    </Toolbar>\r\n                </AppBar>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nSimpleAppBar.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(SimpleAppBar);","import React from 'react';\nimport Header from \"./Header/Header\";\n\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n          <Header/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}